import React, { useEffect, useState } from "react";
import { nanoid } from 'nanoid'
import { getDatabase, child, ref, set, get } from 'firebase/database'
import { isWebUrl } from 'valid-url'
import OverlayTrigger from 'react-bootstrap/OverlayTrigger'
import ToolTip from 'react-bootstrap/Tooltip'

function Form(props) {
    const [formData, setFormData] = useState({
        longURL: '', //Inputted long url from the user
        preferedAlias: '', //Optional user input
        generatedURL: '', //Uses either the optional input or a random short url generated by the app
        loading: false, //Shows spinng logo
        errors: [], //Keeps track of which fields on our form have errors
        errorMessage: {}, //Keeps track of the corresponding message for each error
        toolTipMessage: 'Copy to Clip Board', //Will be updated as the user copies short url
        count: 0
    })

    useEffect(() => {
        console.log(formData.count)
    }, [formData.count])

    async function onSubmit(event) {// Needs to be finished
        event.preventDefault(); //Prevents the page from reloading.D
        setFormData({
            loading: true,
            generatedURL: '',
            count: 2
        })
        console.log("You got this" + String(formData.loading))
    }

    const hasError = (key) => {
        return formData.errors.indexOf(key) !== -1
    }

    return (
        <>
            <div className="container">
                <form autoComplete="off">
                    <h3>Link Swift</h3>

                    <div className="form-group">
                        <label>Enter your URL</label>
                        <input id="longURL"
                            //Add Handle change
                            value={formData.longURL}
                            type="url"
                            required
                            className={
                                hasError('longURL')
                                    ? "form-control is-invalid"
                                    : "form-control"
                            }
                            placeholder="https://www." />
                    </div>

                    <div className={ //Will stay visually hidden until an error from inputted URL 
                        hasError("longURL") ? "text-danger" : "visually-hidden"
                    }
                    >
                        {formData.errorMessage.longURL}
                    </div>

                    <div className="form-group">
                        <label htmlFor="basic-url">Your Mini URL</label>
                        <div className="input-group mb-3">
                            <div className="input-group-prepend">
                                <span className="input-group-text">linkswift.com/</span>
                            </div>
                            <input
                                id="preferredAlias"
                                //onChange={handleChange}
                                value={formData.preferedAlias}
                                className={
                                    hasError('preferredAlias')
                                        ? "form-control is-invalid"
                                        : "form-control"
                                }
                                type="text"
                                placeholder="eg. w4guy6 (Optional)"
                            />
                        </div>
                    </div>

                    <div className={ //Will stay hidden until error from inputted short URL
                        hasError("preferrededAlias") ? "text-dange" : "visually-hidden"}>
                        {formData.errorMessage.suggestedAlias}
                    </div>

                    <button className="btn btn-primary" type="button" onClick={onSubmit}>
                        {
                            formData.loading ?
                                <div>
                                    <span
                                        className="spinner-border spinnder-border-sm"
                                        role="status"
                                        aria-hidden='true' />
                                </div> :
                                <div>
                                    <span
                                        className="visually-hidden spinner-border spinnder-border-sm"
                                        role="status"
                                        aria-hidden='true' />
                                    <span>Link Swift</span>
                                </div>
                        }
                    </button>

                    {
                        formData.generatedURL === '' ?
                            <div></div>
                            :
                            <div className="generatedurl">
                                <span>Your generated URL is: </span>
                                <div className="input-group-mb3">
                                    <input
                                        disabled type="text"
                                        value={formData.generatedURL}
                                        className="form-control"
                                        placeholder="Recipient's username"
                                        aria-label="Recipient's username"
                                        aria-describedby="basic-addon2" />
                                    <div className="input-group-append">
                                        <OverlayTrigger
                                            key={'top'}
                                            placement={'top'}
                                            overlay={
                                                <ToolTip id={`tooltip-${'top'}`}>
                                                    {formData.toolTipMessage}
                                                </ToolTip>
                                            }
                                        >
                                            <button
                                                //onClick={() => copyToClipBoard()}
                                                data-toggle="tooltip"
                                                data-placement="top"
                                                title="Tooltip on top"
                                                className="btn btn-outline-secondary"
                                                type="button">Copy</button>
                                        </OverlayTrigger>
                                    </div>
                                </div>
                            </div>
                    }

                </form>
            </div>
        </>
    )

}

export default Form